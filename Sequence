# Sequence Rule 
# Sequence rule discovery digs deeper than association rule discovery by taking into account the sequence of appearance of the items;  
# Help merchants plan their seasonal inventory.
# Allow researcher to recognize occurrence sequence of events. 
# Sequential rules identify items that frequently follow other items in transaction-based data. A sequential pattern is simply an ordered list of itemsets.
# Sequence rules are based on timestamps of items bought and frequency counts of the number of times items occur alone and in combination in the database.
# All itemsets leading to the final itemset form the antecedent sequence, and the last itemset is the consequent sequence.
# If item A is part of a transaction at time t1, then item B is also part of the transaction at time t2 and X percent of the time (not direct causation).

# Any numeric index that can represent the chronological occurrence of events or activities is the time.
# The observed value of the index is the timestamp.
# The analysis focuses on occurrence sequence of events to a customer instead of absolute times.
# Size: the number of items contained in a sequence.
# Length or Chain Count: the number of itemsets in the sequence.

# Support is the percentage of customers that have the sequence of transactions
# Confidence is the ratio obtained by dividing the support of the sequence rule by the support of the antecedent sequence.
# Expected Confidence is the support of the consequent itemset.
# Lift is the ratio obtained by dividing the confidence of the sequence rule by the support of the consequent.

# Association Rules in PROC ASSOC
# 1. Statements of the DMDB procedure:

PROC DMDB DATA=data-set-name <options>;
	CLASS list-of-variables <option>;
	FREQ variable;
	ID list-of-variables;
	TARGET list-of-variables;
	VAR list-of-variables;
RUN;

# 2. Statements of the ASSOC procedure:
PROC ASSOC DATA=data-set-name <options>;
	CUSTOMER list-of-variables;
	TARGET list-of-variables;
RUN;

# 3. Statements of the SEQUENCE procedure:
PROC SEQUENCE DATA=data-set-name  #input data source, separate observation for each product for each customer.              
     ASSOC=data-set-name          #output data set from the ASSOC procedure
              DMDBCAT=catalog-name    #specifies the metadata catalog for the input data source
              <options>;   #Optional: NITEMS=number(maximum number of events that are possible for each rule, positive integer); SUPPORT = number(minimum number of customers for a rule to be accepted, default is 2%, positive integer); 
	                    OUT= data-set-name(output dataset)           
	CUSTOMER list-of-variables;  
	TARGET variable; 
	VISIT variable </ options>; #timestamp,numeric values. Optional: SAME=same-number(lower time limit between two events, if less, then treated as occured at the same time) 
	                                                                 WINDOW=window-number(upper time limit, if larger, will not be considered for a rule count)
RUN;

# Example: 
proc dmdb data = Week2.SequenceExample dmdbcat = d;
   id Customer;
   class Item;
   var Visit;
   target Item;
run;

proc assoc data = Week2.SequenceExample dmdbcat = d
           out = Week2.assoc_out items = 4 support = 1;  /* Up to 4-itemset, minimum support is 1 customer */
   customer ;
   target Item;
run;

proc sequence data = Week2.SequenceExample
              assoc = Week2.assoc_out dmdbcat = d
              out = Week2.sequence_out nitems = 4        /* Up to chain length of 4 */
              support = 1;                               /* Minimum support is 1 customer */
   customer ;
   target Item;
   visit / same = '00:09:59't;  /* Same time if difference in Visit is less than 10 minutes */
run;


# Sort the rules:
# 1. First by Confidence in descending order,
# 2. Second by Support in descending order, and
# 3. Third by Lift in descending order.
# The objective is to find highly confident rules that are popular and also predictive.
# If your objective is to find rare rules that are predictive, then you will sort Support in ascending order.

proc sort data = Week2.Sequence_out;
   by descending CONF descending SUPPORT descending PSEUDOLIFT;
run;


# Plot the result: 
# Plot Support versus Confidence in a scatterplot.
# Bubble size and color are proportional to Lift

proc sgplot data = Week2.Sequence_out;
   bubble x = CONF y = SUPPORT size = PSEUDOLIFT / colorresponse = PSEUDOLIFT;
   xaxis grid values = (20 to 100 by 5);
   yaxis grid values = (15 to 50 by 5);
run; 


# Pros: 1. Concept of sequence is very straightforward; 2. Algorithm performs well; 3.Sequence rules are presented as IF/THEN statements
# Cons: 1. Routinely generate many rules with a small number of items; 2. Rules can only predict an itemset will occur in the next visit without telling when (e.g., next Saturday) the next visit will happen.
3. Do not consider monetary values of items in the purchase sequence. 












